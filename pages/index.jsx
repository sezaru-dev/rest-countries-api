import { useState, useEffect } from 'react';
import Head from 'next/head';
import Card from '../components/Card';
import FilterDropdown from '../components/FilterDropdown';
import Search from '../components/Search';


export default function Home({countriesData}) {
  const [dropdownToggle, setDropdownToggle] = useState(false)
  const [countries, setCountries] = useState(countriesData)
  const [search, setSearch] = useState('')
  const [region, setRegion] = useState('')


  

  useEffect(() => {
    const filteredCountries = () => {
      if(!search && !region){
        setCountries(countriesData)
      }
      else if(search && !region){
        setCountries(countriesData.filter(country => country.name?.common?.toLowerCase().includes(search.toLowerCase())))
      }
      else if(!search && region){
        setCountries(countriesData.filter(country => country.region == region))
      }else if(!search && region) {
        setCountries(countriesData.filter(country => country.region == region))
      }
      else if (countriesData.filter(country => country.name?.common.toLowerCase().includes(search.toLowerCase())) !== undefined && region) {
        
        const searchValues = countriesData.filter(country => country.name?.common.toLowerCase().includes(search.toLowerCase()))
  
        if (searchValues.filter((item, idx) => searchValues[idx].region === region)) {
          setCountries(searchValues.filter((item, idx) => searchValues[idx].region === region))
        } 
        
      }
      else if(countriesData.filter(country => country.name?.common.toLowerCase().includes(search.toLowerCase())) === undefined) {
        setCountries([])
      }
    }
    filteredCountries()
  },[countriesData, search, region])
  
	return (
		<>
			<Head>
				<title>Where in the world</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

      <div className='flex flex-col md:flex-row md:items-center md:justify-between'>

         <Search
          search={search}
          setSearch={setSearch}
        />
        
        <FilterDropdown
          dropdownToggle={dropdownToggle}
          setDropdownToggle={setDropdownToggle}
          region={region}
          setRegion={setRegion}
        />


      </div>
      {countries?.length ?
        <div className='grid px-8 md:px-0 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-10 md:gap-16 mt-12'>
          {countries?.length && countries?.map((country, index) => (
              <Card key={index} country={country}/>
            ))
          }
        </div>
        : <div className='px-8 md:px-0 font-light mt-12'>The country that you&#39;re trying to search for cannot be found or the spelling is wrong.</div>

      }
		</>
	);
}


export const getStaticProps = async() => {

  const res = await fetch(`https://restcountries.com/v3.1/all`)
  const data = await res.json()
  return {
    props: {
      countriesData: data || []
    }
  }
}

/* 
Error: Export encountered errors on following paths:
        /[countryName]: /Antarctica
        /[countryName]: /Bouvet Island
        /[countryName]: /Heard Island and McDonald Islands

 */